/*
 * msv.odvd - Data structures for miniature cars.
 * Copyright (C) 2015 Christian Berger 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package msv;

message STM32F4Control {
    uint32 dataFeed;
}

message STM32F4Data {
    string rawData;
}

message SensorBoardData {
    uint32 numberOfSensors;
    map<uint32, double> distances;
}

message SteeringData {
    double exampleData;
}

message UserButtonData {
    enum ButtonStatus {
        UNDEFINED = -1,
        RELEASED = 0,
        PRESSED = 1,
    };
    ButtonStatus buttonStatus;
    double duration;
}

message Point {
    double x;
    double y;
}

message MyVec4i {
    int32 x;
    int32 y;
    int32 z;
    int32 w;
}

message CustomLine {
    Point p1;
    Point p2;
    float slope;
    int32 polygonIndex [default = -1];
}

message Lines {
    enum RoadState{
        NOT_SET = 0,
        NORMAL = 1,
        INTERSECTION = 2,
    };

    MyVec4i leftLine;
    MyVec4i rightLine;
    MyVec4i dashedLine;
    CustomLine goalLine;
    CustomLine goalLineLeft;
    CustomLine currentLine;
    int32 pGain;
    int32 intGain;
    int32 derGain;
    int32 speed;
    int32 width;
    int32 height;
    int32 startLineHeight;
    int32 stopLineHeight;
    RoadState roadState;
    int32 confidenceLevel;
}

message LaneDetectorDataToDriver {
    list<int32> switchPointsLeftGoalLines;
    list<int32> switchPointsRightGoalLines;
    list<CustomLine> leftGoalLines;
    list<CustomLine> rightGoalLines;
    CustomLine currentLine;
    bool noTrajectory;
}

message LaneDetectorData {
    uint32 m_frame_count;
    Lines m_lines;
    string m_classification; // Inspection classification
    LaneDetectorDataToDriver m_dataToDriver;
}


